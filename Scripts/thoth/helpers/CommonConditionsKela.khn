function CanUseAlchemyRecipe(value, needConcentration)
    needConcentration = needConcentration or false
    local result = true
    local entity = context.Source
    local strError = "CanUseAlchemyRecipe_False_"
    local isInLaboratiry = HasStatus('KELA_LABORATORY_AURA_ACTIVE',entity)
    local hasConcentrationStatus = HasStatus('ALCH_ELIXIR_CONCENTRATION',entity) 
    if entity.Intelligence < value then
        strError = strError .. "Intelligence"
        result = false
    end
    if not isInLaboratiry.Result then
        strError = strError .. "Laboratory"
        result = false
    end
    if needConcentration and not hasConcentrationStatus.Result then
        strError = strError .. "Concentration"
        result = false
    end
    return ConditionResult(result, {ConditionError(strError, {ConditionErrorData.MakeFromNumber(value, EErrorDataType.SimpleNumber)})})
end

function CanUseWeaponOil()
    local entity = context.Source
    local result = false
    local strResult = "CanUseWeaponOil"
    local nearWhetstone = HasStatus('KELA_BLACKSMITH_FORGE_WHETSTONE_AURA',entity)
    local nearWorkbench = HasStatus('KELA_BLACKSMITH_FORGE_WORKBENCH_AURA',entity) 
    local nearAnvil = HasStatus('KELA_BLACKSMITH_FORGE_FIRSTSTAGE_AURA',entity)
    local canUserWorkbench = HasPassive('PassiveFeature_KelaBlacksmith', entity) | HasPassive('Background_GuildArtisan',entity) | Tagged('DROWELF',entity) | Tagged('ELF',entity)
    local isBlacksmith = HasPassive('PassiveFeature_KelaBlacksmith', entity)

    if nearWhetstone.Result then
        result = true
    elseif nearWorkbench.Result and canUserWorkbench.Result then 
        result = true
    elseif nearAnvil.Result and isBlacksmith.Result then
        result = true
    end

    return ConditionResult(result, {ConditionError("CanUseWeaponOil")})
end

function CanUseWorkbenchDraft(value, needConcentration)
    needConcentration = needConcentration or false
    local entity = context.Source
    local strError = "CanUseWorkbenchDraft_False_"
    local CanUseWorkbench = HasPassive('PassiveFeature_KelaBlacksmith', entity) | HasPassive('Background_GuildArtisan',entity) | Tagged('DROWELF',entity) | Tagged('ELF',entity)   
    local nearWorkbench = HasStatus('KELA_BLACKSMITH_FORGE_WORKBENCH_AURA',entity) 
    local hasConcentrationStatus = HasStatus('ALCH_ELIXIR_CONCENTRATION',entity) 
    
    local result = true
    if not CanUseWorkbench.Result then
        strError = strError .. "CanUseWorkbench"
        result = false
    else     
        if entity.Level < value then
            strError = strError .. "Level"
            result = false
        end
        if not nearWorkbench.Result then
            strError = strError .. "Workbench"
            result = false
        end
        if needConcentration and not hasConcentrationStatus.Result then
            strError = strError .. "Concentration"
            result = false
        end
    end
    return ConditionResult(result, {ConditionError(strError, {ConditionErrorData.MakeFromNumber(value, EErrorDataType.SimpleNumber)})})
end

function CanUseForgeTools(value, needConcentration)
    needConcentration = needConcentration or false
    local entity = context.Source
    local strError = "CanUseForgeTools_False_"
    local hasFeatBlacksmith = HasPassive('PassiveFeature_KelaBlacksmith',entity)    
    local isInForge = HasStatus('KELA_BLACKSMITH_FORGE_FIRSTSTAGE_AURA',entity) | HasStatus('KELA_BLACKSMITH_FORGE_SECONDSTAGE_AURA',entity)
    local hasConcentrationStatus = HasStatus('ALCH_ELIXIR_CONCENTRATION',entity) 
    
    local result = true
    if not hasFeatBlacksmith.Result then
        strError = strError .. "Blacksmith"
        result = false
    else     
        if entity.Level < value then
            strError = strError .. "Level"
            result = false
        end
        if not isInForge.Result then
            strError = strError .. "Forge"
            result = false
        end
        if needConcentration and not hasConcentrationStatus.Result then
            strError = strError .. "Concentration"
            result = false
        end
    end
    return ConditionResult(result, {ConditionError(strError, {ConditionErrorData.MakeFromNumber(value, EErrorDataType.SimpleNumber)})})
end

function IsForgeFirstStage ()
    local entity = context.Source
    result = HasStatus('KELA_BLACKSMITH_FORGE_FIRSTSTAGE_AURA',entity)
    return ConditionResult(result.Result, {ConditionError("IsForgeFirstStage_False")})
end
function IsForgeSecondStage ()
    local entity = context.Source
    result = HasStatus('KELA_BLACKSMITH_FORGE_SECONDSTAGE_AURA',entity)
    return ConditionResult(result.Result, {ConditionError("IsForgeSecondStage_False")})
end
function IsForgeSussurStage ()
    local entity = context.Source
    result = HasStatus('KELA_SUSSUR_FORGE_AURA_ACTIVE',entity)
    return ConditionResult(result.Result, {ConditionError("IsForgeSussurStage_False")})
end

function StrengthEqualOrGreaterThan(value, entity)
    entity = entity or context.Target
    local errorTrue = {ConditionError("StrengthEqualOrGreaterThan_True", {ConditionErrorData.MakeFromNumber(value, EErrorDataType.SimpleNumber)})}
    local errorFalse = {ConditionError("StrengthEqualOrGreaterThan_False", {ConditionErrorData.MakeFromNumber(value, EErrorDataType.SimpleNumber)})}
    return ConditionResult(entity.Strength >= value, errorFalse, errorTrue)
end

function HasNotSummonWithinRange(distance)
    distance = distance or 1.5

    local allies = GetAlliesWithinRange(distance, context.Source)
    if allies ~= nil then
        for _, entity in ipairs(allies.Allies) do

            local isAllySummon = Tagged('SUMMON',entity) | Tagged('SUMMONWITHOUTMOUTH',entity) | Tagged('INTELLECT_DEVOURER_US',entity)
            
            if not isAllySummon.Result then
                return ConditionResult(true)
            end
        end
    end

    return ConditionResult(false)
end

function HasAnyHasteNoBloodlust(entity)
    local entity = entity or context.Source
    return HasAnyStatus({'HASTE','LONGSTRIDER','POTION_OF_SPEED','MAG_CELESTIAL_HASTE','HASTE_SURFACE', 'CONS_DRUG_STIMULANT','TAD_MIND_SANCTUARY_HASTE'}, {}, {}, entity)
end
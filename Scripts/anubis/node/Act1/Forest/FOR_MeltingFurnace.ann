game.states.FOR_MeltingFurnace = State{
    function()
        ------------------------------------------------
        -- Local params
        params.firstStageBurningFX =  {type=EParamType.String, required=false, default="VFX_Script_Forge_Fire_01_7cf111b8-641d-6f24-35c7-1b6121648a2d",
            help=[[First stage VFX.]]}
        params.secondStageBurningFX =  {type=EParamType.String, required=false, default="VFX_Script_Forge_Fire_01_7cf111b8-641d-6f24-35c7-1b6121648a2d",
            help=[[First stage VFX.]]}
        params.startInSecondStage =  {type=EParamType.Bool, required=false, default=false,
                help=[[Does the forge start in the second stage.]]}
        ------------------------------------------------

        ------------------------------------------------
        -- Local variables
        local firstStageFlag = Flag("FOR_IncompleteMasterwork_State_FurnaceFirstStage_06d90851-37f8-47bb-9543-e0d33c8929df")
        local secondStageFlag = Flag("FOR_IncompleteMasterwork_State_FurnaceSecondStage_5682443b-4907-4fe5-acbd-67ef89a35388")        

        local obtainedDagger = Flag("FOR_IncompleteMasterwork_Quest_ObtainedDagger_9855b313-e281-49d7-960d-f4d0b834f398")
        local obtainedSickle = Flag("FOR_IncompleteMasterwork_Quest_ObtainedSickle_488b4302-8a6b-4241-8e27-ba7f92876afe")
        local obtainedGreatsword = Flag("FOR_IncompleteMasterwork_Quest_ObtainedGreatsword_68e94e91-fb18-49a2-9905-21969999c72d")

        local firstStageBurningFX
        local secondStageBurningFX

        local activeFX = nil
        -- For Patch7
        local currentStage = ""

        local firstStageLightRadius = 6.0
        local secondStageLightRadius = 10.0
        ------------------------------------------------

        ------------------------------------------------
        -- Helpers
        helpers.ClearBurningFX = function()
            if activeFX ~= nil then
                StopEffect(activeFX)
                activeFX = nil
            end
        end

        helpers.SetBurningFX = function(burningEffect)
            helpers.ClearBurningFX()
            activeFX = PlayEffectAt(burningEffect, me)
        end

        helpers.StartFirstBurningStage = function()
            if firstStageBurningFX == nil then
                firstStageBurningFX = PrepareEffect(params.firstStageBurningFX)
            end

            DebugText(me, "Applying BURNING status")
            currentStage = "FirstStage"
            ClearFlag(secondStageFlag, me)
            SetFlag(firstStageFlag, me)
            helpers.SetBurningFX(firstStageBurningFX)
            SwitchGameplayLight(me, true, firstStageLightRadius, true)

            if HasActiveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_2") then
                RemoveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_2")
            end
            if not HasActiveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_1") then
                ApplyStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_1", true, -1.0)
            end

            if GetFlag(obtainedDagger) or
                   GetFlag(obtainedSickle) or
                   GetFlag(obtainedGreatsword) then
                RemoveStatus(me, "KELA_SUSSUR_FORGE_AURA")
            end

        end

        helpers.StartSecondBurningStage = function(e)
            if secondStageBurningFX == nil then
                secondStageBurningFX = PrepareEffect(params.secondStageBurningFX)
            end

            DebugText(me, "Starting second stage")
            currentStage = "SecondStage"
            ClearFlag(firstStageFlag, me)
            SetFlag(secondStageFlag, me)
            helpers.SetBurningFX(secondStageBurningFX)
            SwitchGameplayLight(me, true, secondStageLightRadius, true)
            
            if HasActiveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_1") then
                RemoveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_1")
            end
            if not HasActiveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_2") then
                ApplyStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_2", true, -1.0)
            end

            -- if CheckCurrentGameLevel("WLD_Main_A") then
            if me.Name == "S_FOR_MasterworkForge" or me.Name == "S_FOR_MasterworkForge_AfterForgingWeapon" then 
                if GetFlag(obtainedDagger) or GetFlag(obtainedSickle) or GetFlag(obtainedGreatsword) then
                    ApplyStatus(me, "KELA_SUSSUR_FORGE_AURA", true, -1.0)
                end
            end


        end

        helpers.RemoveBurningStatus = function()
            SwitchGameplayLight(me, false, 0.0, false)
            DebugText(me, "Removing BURNING status")
            ClearFlag(firstStageFlag, me)
            ClearFlag(secondStageFlag, me)
            helpers.ClearBurningFX()

            if HasActiveStatus(me, "BURNING") then
                RemoveStatus(me, "BURNING")
            end
            if HasActiveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_1") then
                RemoveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_1")
            end
            if HasActiveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_2") then
                RemoveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_2")
            end


        end

        helpers.ForceSecondStage = function()
            ClearFlag(firstStageFlag, me)
            helpers.ClearBurningFX()

            if not HasActiveStatus(me, "BURNING") then
                ApplyStatus(me, "BURNING", true, -1.0)
            end

            if HasActiveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_1") then
                RemoveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_1")
            end
            if not HasActiveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_2") then
                ApplyStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_2", true, -1.0)
            end

            helpers.StartSecondBurningStage()
        end

        helpers.TryApplyBurning = function()
            if not HasActiveStatus(me, "BURNING") then
                ApplyStatus(me, "BURNING", true, -1.0)
                --helpers.StartFirstBurningStage()
            end
        end
        ------------------------------------------------

        ------------------------------------------------
        -- State
        self.OnInit = function()
            firstStageBurningFX = PrepareEffect(params.firstStageBurningFX)
            secondStageBurningFX = PrepareEffect(params.secondStageBurningFX)
            if params.startInSecondStage then
                helpers.ForceSecondStage()
            end
        end
        ------------------------------------------------

        ------------------------------------------------
        -- Nodes
        nodes.Idle = Action{
            function()
                WaitForInterrupt()
            end
        }
        ------------------------------------------------

        ------------------------------------------------
        -- Events
        events.Damaged = function(e)
            if e.DamageType == DamageType.FIRE then
                helpers.TryApplyBurning()
            elseif e.DamageType == DamageType.RADIANT then
                helpers.TryApplyBurning()
            end
        end

        events.Dying = function(e)
            -- helpers.RemoveBurningStatus()
            helpers.ClearBurningFX()
        end

        events.StatusApplied = function(e)
            if e.Status.StatusID == "BURNING" and not GetFlag(secondStageFlag, me) then
                helpers.StartFirstBurningStage()
            elseif e.Status.StatusID == "KELA_TECHNICAL_BURNING" then
                if not HasActiveStatus(me, "BURNING") then
                    ApplyStatus(me, "BURNING", true, -1.0)
                end

                if GetFlag(secondStageFlag, me) then
                    helpers.StartFirstBurningStage()
                elseif GetFlag(firstStageFlag, me) then
                    helpers.StartSecondBurningStage()
                else
                    helpers.StartFirstBurningStage()
                end
            end

        end

        events.EntityEvent = function(e)
            if e.TargetEntity ~= me then
                return
            end

            -- Start the furnace
            if e.Event == "FOR_StartFurnace" then
                if not HasActiveStatus(me, "BURNING") then
                    ApplyStatus(me, "BURNING", true, -1.0)
                    ApplyStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_1", true, -1.0)
                else
                    RemoveStatus(me, "BURNING")
                    RemoveStatus(me, "KELA_SMELTINGFORGE_STATUS_STAGE_1")
                end
            -- Kindle the furnace (second stage)
            elseif e.Event == "FOR_KindleFurnace" and HasActiveStatus(me, "BURNING") then
                if GetFlag(firstStageFlag, me) then
                    helpers.StartSecondBurningStage()
                else
                    helpers.StartFirstBurningStage()
                end 
            end
        end

        events.StatusRemoved = function(e)
            if e.Status.StatusID == "BURNING" then
                currentStage = ""
                helpers.RemoveBurningStatus()
            end
        end
        ------------------------------------------------

        ------------------------------------------------
        -- FOR PATCH 7
        -- We need to store the current active VFX in the VFXManager. Remove once we can do that
        -- TODO Не работает восстановление
        events.LevelLoaded = function(e)
            if e.Level == "WLD_Main_A" then
                if not HasActiveStatus(me, "BURNING") then
                    ApplyStatus(me, "BURNING", true, -1.0)
                end
                if currentStage == "FirstStage" then
                    helpers.StartFirstBurningStage()
                elseif currentStage == "SecondStage" then
                    helpers.StartSecondBurningStage()
                elseif currentStage == "" then
                    helpers.RemoveBurningStatus()
                end
            elseif e.Level == "BGO_Main_A" or e.Level == "SCL_Main_A" or e.Level == "CTY_LowerCity_A" or e.Level == "CTY_Main_A" then
                if not HasActiveStatus(me, "BURNING") then
                    ApplyStatus(me, "BURNING", true, -1.0)
                end
                if currentStage == "FirstStage" then
                    helpers.StartFirstBurningStage()
                elseif currentStage == "SecondStage" then
                    helpers.StartSecondBurningStage()
                elseif currentStage == "" then
                    helpers.StartFirstBurningStage()
                end
            end
        end
        ------------------------------------------------
    end
}
